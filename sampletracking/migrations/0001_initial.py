# Generated by Django 5.1.11 on 2025-09-19 21:18

import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CrudeSample',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('barcode', models.CharField(help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('subject_id', models.CharField(help_text='Identifier provided by the submitter', max_length=50, verbose_name='Subject ID')),
                ('collection_date', models.DateField(help_text='Date when the sample was collected')),
                ('sample_source', models.CharField(choices=[('Stool', 'Stool'), ('Oral', 'Oral Swab'), ('Nasal', 'Nasal Swab'), ('Skin', 'Skin Swab'), ('Blood', 'Blood'), ('Tissue', 'Tissue'), ('Other', 'Other')], default='', help_text='Source of the sample', max_length=100)),
                ('source_details', models.TextField(blank=True, help_text='Additional details about the sample source', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Crude Sample',
                'verbose_name_plural': 'Crude Samples',
            },
        ),
        migrations.CreateModel(
            name='Aliquot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('barcode', models.CharField(help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('volume', models.FloatField(blank=True, help_text='Volume of the aliquot in microliters', null=True)),
                ('concentration', models.FloatField(blank=True, help_text='Concentration of the aliquot', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
                ('parent_barcode', models.ForeignKey(help_text='The crude sample this aliquot was derived from', on_delete=django.db.models.deletion.PROTECT, related_name='aliquots', to='sampletracking.crudesample', to_field='barcode')),
            ],
            options={
                'verbose_name': 'Aliquot',
                'verbose_name_plural': 'Aliquots',
            },
        ),
        migrations.CreateModel(
            name='Extract',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('barcode', models.CharField(help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('extract_type', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA'), ('cfDNA', 'cfDNA'), ('Protein', 'Protein'), ('Metabolomics', 'Metabolomics'), ('Antimicrobials', 'Antimicrobials'), ('Other', 'Other')], default='DNA', help_text='Type of extract', max_length=100)),
                ('quality_score', models.FloatField(blank=True, help_text='Quality score for this extract (e.g., A260/A280)', null=True)),
                ('concentration', models.FloatField(blank=True, help_text='Concentration of the extract in ng/ÂµL', null=True)),
                ('sample_weight', models.DecimalField(blank=True, decimal_places=3, help_text='Sample weight in grams (for Metabolomics/Antimicrobials)', max_digits=10, null=True)),
                ('extraction_solvent', models.CharField(blank=True, help_text='Solvent used for extraction (for Metabolomics/Antimicrobials)', max_length=255, null=True)),
                ('solvent_volume', models.DecimalField(blank=True, decimal_places=2, help_text='Volume of solvent used in mL (for Metabolomics/Antimicrobials)', max_digits=10, null=True)),
                ('extract_volume', models.DecimalField(blank=True, decimal_places=2, help_text='Final extract volume in mL (for Metabolomics/Antimicrobials)', max_digits=10, null=True)),
                ('extraction_method', models.CharField(blank=True, choices=[('PowerFecal Pro DNA', 'PowerFecal Pro DNA'), ('ZymoBIOMICS DNA', 'ZymoBIOMICS DNA'), ('RNeasy PowerMicrobiome', 'RNeasy PowerMicrobiome'), ('ZymoBIOMICS RNA', 'ZymoBIOMICS RNA'), ('AllPrep PowerFecal DNA/RNA', 'AllPrep PowerFecal DNA/RNA'), ('ZymoBIOMICS DNA/RNA', 'ZymoBIOMICS DNA/RNA'), ('Other', 'Other')], default='PowerFecal Pro DNA', help_text='Extraction method used (for DNA/RNA extracts)', max_length=255, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(help_text='The aliquot this extract was derived from', on_delete=django.db.models.deletion.PROTECT, related_name='extracts', to='sampletracking.aliquot', to_field='barcode')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Extract',
                'verbose_name_plural': 'Extracts',
            },
        ),
        migrations.CreateModel(
            name='HistoricalAliquot',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('volume', models.FloatField(blank=True, help_text='Volume of the aliquot in microliters', null=True)),
                ('concentration', models.FloatField(blank=True, help_text='Concentration of the aliquot', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_barcode', models.ForeignKey(blank=True, db_constraint=False, help_text='The crude sample this aliquot was derived from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.crudesample', to_field='barcode')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Aliquot',
                'verbose_name_plural': 'historical Aliquots',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCrudeSample',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('subject_id', models.CharField(help_text='Identifier provided by the submitter', max_length=50, verbose_name='Subject ID')),
                ('collection_date', models.DateField(help_text='Date when the sample was collected')),
                ('sample_source', models.CharField(choices=[('Stool', 'Stool'), ('Oral', 'Oral Swab'), ('Nasal', 'Nasal Swab'), ('Skin', 'Skin Swab'), ('Blood', 'Blood'), ('Tissue', 'Tissue'), ('Other', 'Other')], default='', help_text='Source of the sample', max_length=100)),
                ('source_details', models.TextField(blank=True, help_text='Additional details about the sample source', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Crude Sample',
                'verbose_name_plural': 'historical Crude Samples',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalExtract',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('extract_type', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA'), ('cfDNA', 'cfDNA'), ('Protein', 'Protein'), ('Metabolomics', 'Metabolomics'), ('Antimicrobials', 'Antimicrobials'), ('Other', 'Other')], default='DNA', help_text='Type of extract', max_length=100)),
                ('quality_score', models.FloatField(blank=True, help_text='Quality score for this extract (e.g., A260/A280)', null=True)),
                ('concentration', models.FloatField(blank=True, help_text='Concentration of the extract in ng/ÂµL', null=True)),
                ('sample_weight', models.DecimalField(blank=True, decimal_places=3, help_text='Sample weight in grams (for Metabolomics/Antimicrobials)', max_digits=10, null=True)),
                ('extraction_solvent', models.CharField(blank=True, help_text='Solvent used for extraction (for Metabolomics/Antimicrobials)', max_length=255, null=True)),
                ('solvent_volume', models.DecimalField(blank=True, decimal_places=2, help_text='Volume of solvent used in mL (for Metabolomics/Antimicrobials)', max_digits=10, null=True)),
                ('extract_volume', models.DecimalField(blank=True, decimal_places=2, help_text='Final extract volume in mL (for Metabolomics/Antimicrobials)', max_digits=10, null=True)),
                ('extraction_method', models.CharField(blank=True, choices=[('PowerFecal Pro DNA', 'PowerFecal Pro DNA'), ('ZymoBIOMICS DNA', 'ZymoBIOMICS DNA'), ('RNeasy PowerMicrobiome', 'RNeasy PowerMicrobiome'), ('ZymoBIOMICS RNA', 'ZymoBIOMICS RNA'), ('AllPrep PowerFecal DNA/RNA', 'AllPrep PowerFecal DNA/RNA'), ('ZymoBIOMICS DNA/RNA', 'ZymoBIOMICS DNA/RNA'), ('Other', 'Other')], default='PowerFecal Pro DNA', help_text='Extraction method used (for DNA/RNA extracts)', max_length=255, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, help_text='The aliquot this extract was derived from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.aliquot', to_field='barcode')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Extract',
                'verbose_name_plural': 'historical Extracts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPlate',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this plate', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('plate_type', models.CharField(choices=[('96', '96-Well'), ('384', '384-Well')], default='96', help_text='Type of plate (96-well or 384-well)', max_length=3)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this plate is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this plate is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this plate', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Plate',
                'verbose_name_plural': 'historical Plates',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='Plate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('barcode', models.CharField(help_text='Unique identifier for this plate', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('plate_type', models.CharField(choices=[('96', '96-Well'), ('384', '384-Well')], default='96', help_text='Type of plate (96-well or 384-well)', max_length=3)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this plate is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this plate is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this plate', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Plate',
                'verbose_name_plural': 'Plates',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalSequenceLibrary',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('library_type', models.CharField(choices=[('Nextera', 'Nextera'), ('SMARTer', 'SMARTer'), ('QIA_COVID', 'QIA_COVID'), ('TruSeq', 'TruSeq'), ('Other', 'Other')], default='DNA', help_text='Type of sequencing library', max_length=100)),
                ('nindex', models.CharField(choices=[('N701', 'N701'), ('N702', 'N702'), ('N703', 'N703'), ('N704', 'N704'), ('N705', 'N705'), ('N706', 'N706'), ('N707', 'N707'), ('N710', 'N710'), ('N711', 'N711'), ('N712', 'N712'), ('N714', 'N714'), ('N715', 'N715'), ('N716', 'N716'), ('N718', 'N718'), ('N719', 'N719'), ('N720', 'N720'), ('N721', 'N721'), ('N722', 'N722'), ('N723', 'N723'), ('N724', 'N724'), ('N726', 'N726'), ('N727', 'N727'), ('N728', 'N728'), ('N729', 'N729')], default='', help_text='N-index used for this library', max_length=100)),
                ('sindex', models.CharField(choices=[('S510', 'S510'), ('S502', 'S502'), ('S505', 'S505'), ('S506', 'S506'), ('S507', 'S507'), ('S510', 'S510'), ('S503', 'S503'), ('S511', 'S511'), ('S508', 'S508'), ('S516', 'S516'), ('S517', 'S517'), ('S518', 'S518'), ('S521', 'S521'), ('S515', 'S515'), ('S522', 'S522'), ('S520', 'S520'), ('S513', 'S513')], default='', help_text='S-index used for this library', max_length=100)),
                ('qubit_conc', models.FloatField(blank=True, help_text='Qubit concentration in ng/ÂµL', null=True)),
                ('diluted_qubit_conc', models.FloatField(blank=True, help_text='Diluted Qubit concentration in ng/ÂµL', null=True)),
                ('clean_library_conc', models.FloatField(blank=True, help_text='Clean library concentration in ng/ÂµL', null=True)),
                ('date_sequenced', models.DateField(blank=True, help_text='Date when the library was sequenced', null=True)),
                ('sequencing_platform', models.CharField(blank=True, help_text='Platform used for sequencing', max_length=100, null=True)),
                ('sequencing_run_id', models.CharField(blank=True, help_text='Identifier for the sequencing run', max_length=100, null=True)),
                ('well', models.CharField(blank=True, help_text='Well position, e.g., A1, H12', max_length=4, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, help_text='The extract this library was derived from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.extract')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('plate', models.ForeignKey(blank=True, db_constraint=False, help_text='The plate this library is in', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.plate')),
            ],
            options={
                'verbose_name': 'historical Sequence Library',
                'verbose_name_plural': 'historical Sequence Libraries',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='SequenceLibrary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('barcode', models.CharField(help_text='Unique identifier for this sample (auto-generated for plate storage)', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AWAITING_RECEIPT', 'Awaiting Receipt'), ('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AWAITING_RECEIPT', help_text='The current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this sample is stored', max_length=100, null=True)),
                ('container_type', models.CharField(blank=True, choices=[('box', 'Box'), ('plate', 'Plate')], default='box', help_text='Type of container (box or plate)', max_length=10, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the container where this sample is stored', max_length=100, null=True)),
                ('well_ID', models.CharField(blank=True, help_text='Well position in the container (e.g., A1, B2, etc.)', max_length=50, null=True)),
                ('library_type', models.CharField(choices=[('Nextera', 'Nextera'), ('SMARTer', 'SMARTer'), ('QIA_COVID', 'QIA_COVID'), ('TruSeq', 'TruSeq'), ('Other', 'Other')], default='DNA', help_text='Type of sequencing library', max_length=100)),
                ('nindex', models.CharField(choices=[('N701', 'N701'), ('N702', 'N702'), ('N703', 'N703'), ('N704', 'N704'), ('N705', 'N705'), ('N706', 'N706'), ('N707', 'N707'), ('N710', 'N710'), ('N711', 'N711'), ('N712', 'N712'), ('N714', 'N714'), ('N715', 'N715'), ('N716', 'N716'), ('N718', 'N718'), ('N719', 'N719'), ('N720', 'N720'), ('N721', 'N721'), ('N722', 'N722'), ('N723', 'N723'), ('N724', 'N724'), ('N726', 'N726'), ('N727', 'N727'), ('N728', 'N728'), ('N729', 'N729')], default='', help_text='N-index used for this library', max_length=100)),
                ('sindex', models.CharField(choices=[('S510', 'S510'), ('S502', 'S502'), ('S505', 'S505'), ('S506', 'S506'), ('S507', 'S507'), ('S510', 'S510'), ('S503', 'S503'), ('S511', 'S511'), ('S508', 'S508'), ('S516', 'S516'), ('S517', 'S517'), ('S518', 'S518'), ('S521', 'S521'), ('S515', 'S515'), ('S522', 'S522'), ('S520', 'S520'), ('S513', 'S513')], default='', help_text='S-index used for this library', max_length=100)),
                ('qubit_conc', models.FloatField(blank=True, help_text='Qubit concentration in ng/ÂµL', null=True)),
                ('diluted_qubit_conc', models.FloatField(blank=True, help_text='Diluted Qubit concentration in ng/ÂµL', null=True)),
                ('clean_library_conc', models.FloatField(blank=True, help_text='Clean library concentration in ng/ÂµL', null=True)),
                ('date_sequenced', models.DateField(blank=True, help_text='Date when the library was sequenced', null=True)),
                ('sequencing_platform', models.CharField(blank=True, help_text='Platform used for sequencing', max_length=100, null=True)),
                ('sequencing_run_id', models.CharField(blank=True, help_text='Identifier for the sequencing run', max_length=100, null=True)),
                ('well', models.CharField(blank=True, help_text='Well position, e.g., A1, H12', max_length=4, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(help_text='The extract this library was derived from', on_delete=django.db.models.deletion.PROTECT, related_name='libraries', to='sampletracking.extract')),
                ('plate', models.ForeignKey(blank=True, help_text='The plate this library is in', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='libraries', to='sampletracking.plate')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Sequence Library',
                'verbose_name_plural': 'Sequence Libraries',
            },
        ),
        migrations.AddIndex(
            model_name='crudesample',
            index=models.Index(fields=['barcode'], name='sampletrack_barcode_4ea581_idx'),
        ),
        migrations.AddIndex(
            model_name='crudesample',
            index=models.Index(fields=['subject_id'], name='sampletrack_subject_cf1459_idx'),
        ),
        migrations.AddIndex(
            model_name='crudesample',
            index=models.Index(fields=['collection_date'], name='sampletrack_collect_7fe8db_idx'),
        ),
        migrations.AddIndex(
            model_name='aliquot',
            index=models.Index(fields=['barcode'], name='sampletrack_barcode_89bb05_idx'),
        ),
        migrations.AddIndex(
            model_name='extract',
            index=models.Index(fields=['barcode'], name='sampletrack_barcode_ba8d9a_idx'),
        ),
        migrations.AddIndex(
            model_name='extract',
            index=models.Index(fields=['extract_type'], name='sampletrack_extract_d8a31d_idx'),
        ),
        migrations.AddIndex(
            model_name='sequencelibrary',
            index=models.Index(fields=['barcode'], name='sampletrack_barcode_1091e7_idx'),
        ),
        migrations.AddIndex(
            model_name='sequencelibrary',
            index=models.Index(fields=['library_type'], name='sampletrack_library_022303_idx'),
        ),
        migrations.AddIndex(
            model_name='sequencelibrary',
            index=models.Index(fields=['date_sequenced'], name='sampletrack_date_se_61a7bc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sequencelibrary',
            unique_together={('plate', 'well')},
        ),
    ]
