# Generated by Django 5.0.2 on 2025-07-15 09:36

import django.core.validators
import django.db.models.deletion
import simple_history.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('sampletracking', '0008_sequencelibrary_well_plate_sequencelibrary_plate_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='HistoricalAliquot',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AVAILABLE', help_text='Current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(help_text='Identifier for the freezer where this sample is stored', max_length=100)),
                ('shelf_ID', models.CharField(help_text='Identifier for the shelf where this sample is stored', max_length=100)),
                ('box_ID', models.CharField(help_text='Identifier for the box where this sample is stored', max_length=100)),
                ('volume', models.FloatField(blank=True, help_text='Volume of the aliquot in microliters', null=True)),
                ('concentration', models.FloatField(blank=True, help_text='Concentration of the aliquot', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent_barcode', models.ForeignKey(blank=True, db_constraint=False, help_text='The crude sample this aliquot was derived from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.crudesample', to_field='barcode')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Aliquot',
                'verbose_name_plural': 'historical Aliquots',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCrudeSample',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AVAILABLE', help_text='Current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(help_text='Identifier for the freezer where this sample is stored', max_length=100)),
                ('shelf_ID', models.CharField(help_text='Identifier for the shelf where this sample is stored', max_length=100)),
                ('box_ID', models.CharField(help_text='Identifier for the box where this sample is stored', max_length=100)),
                ('your_id', models.CharField(help_text='Identifier provided by the submitter', max_length=50)),
                ('collection_date', models.DateField(help_text='Date when the sample was collected')),
                ('sample_source', models.CharField(choices=[('Stool', 'Stool'), ('Nasal', 'Nasal Swab'), ('Skin', 'Skin Swab'), ('Oral', 'Oral Swab'), ('Blood', 'Blood'), ('Tissue', 'Tissue'), ('Other', 'Other')], default='', help_text='Source of the sample', max_length=100)),
                ('source_details', models.TextField(blank=True, help_text='Additional details about the sample source', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Crude Sample',
                'verbose_name_plural': 'historical Crude Samples',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalExtract',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AVAILABLE', help_text='Current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(help_text='Identifier for the freezer where this sample is stored', max_length=100)),
                ('shelf_ID', models.CharField(help_text='Identifier for the shelf where this sample is stored', max_length=100)),
                ('box_ID', models.CharField(help_text='Identifier for the box where this sample is stored', max_length=100)),
                ('extract_type', models.CharField(choices=[('DNA', 'DNA'), ('RNA', 'RNA'), ('cfDNA', 'cfDNA'), ('Protein', 'Protein'), ('Other', 'Other')], default='DNA', help_text='Type of extract', max_length=100)),
                ('protocol_used', models.CharField(blank=True, help_text='Protocol used for extraction', max_length=255, null=True)),
                ('quality_score', models.FloatField(blank=True, help_text='Quality score for this extract (e.g., A260/A280)', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, help_text='The aliquot this extract was derived from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.aliquot', to_field='barcode')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Extract',
                'verbose_name_plural': 'historical Extracts',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalPlate',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this plate', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('plate_type', models.CharField(choices=[('96', '96-Well'), ('384', '384-Well')], default='96', help_text='Type of plate (96-well or 384-well)', max_length=3)),
                ('freezer_ID', models.CharField(blank=True, help_text='Identifier for the freezer where this plate is stored', max_length=100, null=True)),
                ('shelf_ID', models.CharField(blank=True, help_text='Identifier for the shelf where this plate is stored', max_length=100, null=True)),
                ('box_ID', models.CharField(blank=True, help_text='Identifier for the box where this plate is stored', max_length=100, null=True)),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this plate', null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Plate',
                'verbose_name_plural': 'historical Plates',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalSequenceLibrary',
            fields=[
                ('id', models.BigIntegerField(auto_created=True, blank=True, db_index=True, verbose_name='ID')),
                ('created_at', models.DateTimeField(blank=True, editable=False)),
                ('updated_at', models.DateTimeField(blank=True, editable=False)),
                ('barcode', models.CharField(db_index=True, help_text='Unique identifier for this sample', max_length=255, validators=[django.core.validators.RegexValidator('^[A-Za-z0-9_-]+$', 'Barcode can only contain alphanumeric characters, underscores, and hyphens.')])),
                ('date_created', models.DateField(help_text='Date when the sample was created')),
                ('notes', models.TextField(blank=True, help_text='Additional notes about this sample', null=True)),
                ('status', models.CharField(choices=[('AVAILABLE', 'Available'), ('IN_PROCESS', 'In Process'), ('EXHAUSTED', 'Exhausted'), ('CONTAMINATED', 'Contaminated'), ('ARCHIVED', 'Archived')], default='AVAILABLE', help_text='Current status of the sample', max_length=20)),
                ('freezer_ID', models.CharField(help_text='Identifier for the freezer where this sample is stored', max_length=100)),
                ('shelf_ID', models.CharField(help_text='Identifier for the shelf where this sample is stored', max_length=100)),
                ('box_ID', models.CharField(help_text='Identifier for the box where this sample is stored', max_length=100)),
                ('library_type', models.CharField(choices=[('Nextera', 'Nextera'), ('SMARTer', 'SMARTer'), ('QIA_COVID', 'QIA_COVID'), ('TruSeq', 'TruSeq'), ('Other', 'Other')], default='DNA', help_text='Type of sequencing library', max_length=100)),
                ('nindex', models.CharField(choices=[('N701', 'N701'), ('N702', 'N702'), ('N703', 'N703'), ('N704', 'N704'), ('N705', 'N705'), ('N706', 'N706'), ('N707', 'N707'), ('N710', 'N710'), ('N711', 'N711'), ('N712', 'N712'), ('N714', 'N714'), ('N715', 'N715'), ('N716', 'N716'), ('N718', 'N718'), ('N719', 'N719'), ('N720', 'N720'), ('N721', 'N721'), ('N722', 'N722'), ('N723', 'N723'), ('N724', 'N724'), ('N726', 'N726'), ('N727', 'N727'), ('N728', 'N728'), ('N729', 'N729')], default='', help_text='N-index used for this library', max_length=100)),
                ('sindex', models.CharField(choices=[('S510', 'S510'), ('S502', 'S502'), ('S505', 'S505'), ('S506', 'S506'), ('S507', 'S507'), ('S510', 'S510'), ('S503', 'S503'), ('S511', 'S511'), ('S508', 'S508'), ('S516', 'S516'), ('S517', 'S517'), ('S518', 'S518'), ('S521', 'S521'), ('S515', 'S515'), ('S522', 'S522'), ('S520', 'S520'), ('S513', 'S513')], default='', help_text='S-index used for this library', max_length=100)),
                ('qubit_conc', models.FloatField(blank=True, help_text='Qubit concentration in ng/µL', null=True)),
                ('diluted_qubit_conc', models.FloatField(blank=True, help_text='Diluted Qubit concentration in ng/µL', null=True)),
                ('clean_library_conc', models.FloatField(blank=True, help_text='Clean library concentration in ng/µL', null=True)),
                ('date_sequenced', models.DateField(blank=True, help_text='Date when the library was sequenced', null=True)),
                ('sequencing_platform', models.CharField(blank=True, help_text='Platform used for sequencing', max_length=100, null=True)),
                ('sequencing_run_id', models.CharField(blank=True, help_text='Identifier for the sequencing run', max_length=100, null=True)),
                ('well', models.CharField(blank=True, help_text='Well position, e.g., A1, H12', max_length=4, null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField(db_index=True)),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('created_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('parent', models.ForeignKey(blank=True, db_constraint=False, help_text='The extract this library was derived from', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.extract')),
                ('plate', models.ForeignKey(blank=True, db_constraint=False, help_text='The plate this library is in', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='sampletracking.plate')),
                ('updated_by', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical Sequence Library',
                'verbose_name_plural': 'historical Sequence Libraries',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': ('history_date', 'history_id'),
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
